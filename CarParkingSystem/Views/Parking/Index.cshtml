@using CarParkingSystem.Models;
@model IEnumerable<ParkingLotViewModel>;
<link rel="stylesheet" href="~/css/locations.css" />

@*<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyBWgAm8E5i4XXP7Qq-OLjc9h4WjOTtzEsw",
        v: "weekly",

    });*@
@*</script>*@
<script async
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBWgAm8E5i4XXP7Qq-OLjc9h4WjOTtzEsw&libraries=places&callback=initMap">
</script>
<h1 id="title">Parking Locations</h1>
<button id="near-me" onclick="scrollToMap()">Find parking near me</button>
<div id="location-input">
    <label for="location" class="form-label">Where do you want to park?</label>
    <div id="search-bar">
        <input class="form-control" id="location" placeholder="e.g.: City, State, Country, ZIP Code">
        <button id="search" onclick="scrollToMap()" >Search</button>
    </div>
</div>
<div id="map">
</div>





@section Scripts{
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <script>
        //Scrolls to map
        function scrollToMap() {
            const map = document.getElementById('map');
            map.scrollIntoView();
        }
    </script>

    <script type="text/javascript">
        let map;
        const iconParking =
            "https://developers.google.com/maps/documentation/javascript/examples/full/images/parking_lot_maps.png";
        function initMap() {
            //Create Map
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 42.713552, lng: 25.115340 },
                zoom: 4,
            });

            //Place markers for all locations
        @foreach (var item in Model)
        {
            <text>
                                    var marker = new google.maps.Marker({
                        map: map,
                        position: { lat: @item.Latitude, lng: @item.Longitude },
                        title: '@item.Name',
                        icon: iconParking
                    });
                var infowindow = new google.maps.InfoWindow();
                google.maps.event.addListener(marker, "click", () => {
                    infowindow.setContent(`<div id="info-window">
                                                                    <h2 class="ui header">@item.Name</h2>
                                                                    <p>@item.Address</p>
                                                                    <p>Hourly Rate: @item.HourlyRate$</p>
                                                                    <p>Empty spots: @item.AvailableSpaces</p>
                    @if (item.IsNonStop || (DateTime.Now.TimeOfDay >= item.OpeningHour.ToTimeSpan() && DateTime.Now.TimeOfDay <= item.ClosingHour.ToTimeSpan()))
                    {
                                                    <p class="open">Open</p>
                    }
                    else
                    {
                        TimeSpan ts = new TimeSpan(24, 0, 0);
                        TimeSpan timeUntil = ts - DateTime.Now.TimeOfDay + item.OpeningHour.ToTimeSpan();
                                                    <p class="closed">Closed (Opens in @timeUntil.ToString(@"hh") hours)</p>

                    }
                                    </div>`);
                    infowindow.open(map, marker);
                    infowindow.setPosition({ lat: @item.Latitude, lng: @item.Longitude});
                });
            </text>
        }

            //Get current location and zoom
            const locationButton = document.getElementById("near-me");

            locationButton.addEventListener("click", () => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };
                            map.zoom = 8;
                            map.setCenter(pos);
                        },
                        () => {
                            handleLocationError(true, infoWindow, map.getCenter());
                        },
                    );
                } else {
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            });

            //Error handling
            function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                infoWindow.setPosition(pos);
                infoWindow.setContent(
                    browserHasGeolocation
                        ? "Error: The Geolocation service failed."
                        : "Error: Your browser doesn't support geolocation.",
                );
                infoWindow.open(map);
            }

            //Search bar
            var searchBox = new google.maps.places.SearchBox(document.getElementById('location'));
            var searchButton = document.getElementById('search');
            google.maps.event.addListener(searchBox, 'places_changed', function () {
                searchBox.set('map', null);


                var places = searchBox.getPlaces();

                var bounds = new google.maps.LatLngBounds();
                var i, place;
                for (i = 0; place = places[i]; i++) {
                    (function (place) {
                        var marker = new google.maps.Marker({

                            position: place.geometry.location
                        });
                        marker.bindTo('map', searchBox, 'map');
                        google.maps.event.addListener(marker, 'map_changed', function () {
                            if (!this.getMap()) {
                                this.unbindAll();
                            }
                        });
                        bounds.extend(place.geometry.location);


                    }(place));

                }
                map.fitBounds(bounds);
                searchBox.set('map', map);
                map.setZoom(Math.min(map.getZoom(), 12));
                scrollToMap();
            });
            google.maps.event.addDomListener(window, 'load', initMap);

        }
    </script>
    <script>

    </script>
}



<style>
    @@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Condensed:wght@300;400;700&family=Work+Sans:wght@600&display=swap');

    p.closed {
        color: red;
    }

    p.open {
        color: forestgreen;
    }

    div#info-window {
        display: flex;
        flex-direction: column;
        justify-content: start;
        width: 14em;
    }

        div#info-window > h2 {
            font-size: 16px;
        }

        div#info-window > p {
            margin-bottom: 0.5em;
        }

    h1#title {
        font-family: 'Roboto Condensed';
        font-size: 5em;
        text-align: center;
        margin-top: 25px;
        margin-bottom: 25px;
    }

    button#near-me {
        display: flex;
        text-align: center;
        margin: auto;
        margin-top: 50px;
        background-color: deepskyblue;
        padding: 6px 24px;
        border: solid deepskyblue 1px;
        border-radius: 32px;
        font-size: 1.5em;
        color: white;
        font-weight: 500;
    }

    div#location-input {
        width: 40%;
        margin: auto;
        margin-top: 25px;
        text-align: center;
    }

    label.form-label {
        font-size: 1.5em;
    }

    input {
        border-radius: 32px !important;
    }

    div#search-bar {
        display: flex;
        flex-direction: row;
        gap: 1em;
    }

    button#search {
        background-color: deepskyblue;
        padding: 6px 24px;
        border: solid deepskyblue 1px;
        border-radius: 32px;
        font-size: 1em;
        color: white;
        font-weight: 500;
    }

</style>
